---
title: "Class 13: RNA Seq (pt. 1)"
author: "Amanda Wilpitz | A17463962"
format: pdf
---

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countDATA and colDATA

There are two datasets I need to import/read:

- `countData` the transcript counts per gene (rows) in the different experiments
- `colData` information about the columns (i.e. experiments) in `countData`

```{r}
counts   <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

We can have a peak at these with `head()`

```{r}
head(counts)
```

```{r}
metadata
```


> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex == "control")
```
```{r}
table(metadata$dex)
```


## Toy Differential Gene Expression


We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated". If there is no difference, the drug didn't change anything. 

- Step 1. Extract all "control" columns from the `counts` data

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[, control.inds]
```

```{r}
dim(control.counts)
head(control.counts)
```
- Step 2. Find the mean value for each gene in the `control` columns

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)

head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

You can make the code mentioned in the lab sheet be "rowSums(control.counts)/ncol(control.counts)" instead of "rowSums(control.counts)/4". With it being over 4, the 4 is hard coded in and if any experiments are added, it wouldn't calculate it correctly. By having a code for the count of how many columns (experiments) there are, it would adjust according to new information. 

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

- Step 3. Extract all "treated" columns from the `counts` data

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[, treated.inds]
```

- Step 4. Find the mean value for each gene in the `treated` columns

```{r}
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)

head(treated.mean)
```

Let's put these two mean values together for easy book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

You would use *geom_point()*

```{r}
library(ggplot2)

ggplot(meancounts, aes(control.mean, treated.mean)) +
  geom_point(alpha = 0.3) 
#using alpha allows us to see that there is a lot of overplotting with data points overlapping
```

Any points on the diagonol shows that the drug had no effect. 

Whenever we see data that is so heavly skewed like this, we often log transform it so we can see what is going on more easily. 

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```


```{r}
ggplot(meancounts, aes(control.mean, treated.mean)) +
  geom_point(alpha = 0.3) +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2") 
```

We most often work in log2 units as this makes the math easier. Let's have a play to see this.

```{r}
#treated/control
log2(20/10)

#control/treated
log2(10/20)
log2(10/10)
```
We can now add "log2 fold-change" values to our `meancounts` dataset. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                            meancounts$control.mean)

head(meancounts)
```

NaN means not a number (dividing a zero by a zero and finding the log of it)
-Inf means infinity 

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means.

```{r}
to.keep <- rowSums(meancounts[, 1:2] == 0) == 0
mycounts <- meancounts[to.keep,]
nrow(mycounts)
```


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

How many genes are "up" regulated at the common log2 fold-change threshold of +2? 

```{r}
up.inds <- mycounts$log2fc >= 2
sum(up.inds, na.rm = T)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

How many genes are "down" regulated at the common log2 fold-change threshold of -2? 

```{r}
down.inds <- mycounts$log2fc <= -2
sum(down.inds, na.rm = T)
```

> Q10. Do you trust these results? Why or why not?

I do not trust these results to be different because they may be downregulated or upregulated in their magnitude of their differences, but according to a p-value may not be signifiant.

## DESeq2 Analysis

To do this the right way we need to consider the significance of the differences not just their magnitude. 

```{r}
#| message: false
library(DESeq2)
```

To use this package, it wants countData and colData in a specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata,
                       design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

Extract my results

```{r}
res <- results (dds)
head(res)
```

Plot of fold-change vs P-value (adjusted for multiple testing):

```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the p-value 

```{r}
plot(res$log2FoldChange, log(res$padj))
```

```{r}
log(0.01)
```

```{r}
log(0.0000000001)
```
A lower p-value has a lower log value so we need to look down the axis. 

We can just flip that y-axis by putting a minus sign on it.

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab = "Log2 Fold Change",
     ylab = "-Log(Adjusted P-value)")
```
Upregulated is to the right, downregulated genes are to the left

Let's save our work to date

```{r}
write.csv(res, file = "myresults.csv")
```

To finish off let's make a nicer volcano plot. 

- Add the log2 threshold at +2/-2
- Add p-value threshold at 0.05
- Add color to highlight the subset of genes that meet both of the above thresholds

Make it with ggplot2

```{r}
# Setup our custom point color vector 
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange >= 2 ]  <- "red" 
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj > 0.05] <- "grey"
```


```{r}
ggplot(res) +
  aes(log2FoldChange, -log(res$padj)) +
  geom_point(col = mycols) +
  geom_vline(xintercept = c(-2, 2), col = "grey", linetype = 2) +
  geom_hline(xintercept = 0, yintercept = 0.05, col = "grey", linetype = 2) +
  labs(x = "Log2(FoldChange", y = "-Log(P-Value)")
```





