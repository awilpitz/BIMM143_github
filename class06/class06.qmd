---
title: "R Functions Lab"
author: "Amanda Wilpitz | PID: A17463962"
format: pdf
---

Today, we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own. 

## A First Silly Function 

Note that arguments 2 and 3 have default values (because we set y = 0 and z = 0).

```{r}
add <- function(x, y=0, z=0) {x+y+z}
```

Can I just use this?

```{r}
add(1,1)

add(x=1, y=c(10, 100))
```

First I need to run the code chunk creating the function, before I can use it. 

```{r}
add(100)
```
```{r}
add(100,1,1)
```

## A Second More Fun Function

Let's write a function that generates random nucleotide sequences. 

We can make use of the in-built 'sample()' function in R to help us here. 

```{r}
sample(x= 1:10, size = 9)
```

```{r}
sample(x= 1:10, size = 11, replace = TRUE)
```
> Q. Can you use 'sample()' to generate a random nucleotide sequence of length 5?

```{r}
sample(x=c("C", "G", "T", "A"), size = 5, replace = TRUE)
```

> Q. Write a function `generate_dna()` that makes a nucleotide sequence of a user specified length. 

Every function in R has at least 3 things: 

- a **name** (in our case "generate_dna")
- one or more **input arguments** (the "length" of sequence we want)
- a **body** (that does the work)

```{r}
generate_dna <- function(length=5) {
  bases <- c("C", "G", "T", "A")
  sample(bases, size = length, replace = TRUE)}

generate_dna(length=12)
```

```{r}
generate_dna(10)

generate_dna(100)
```


> Q. Can you write a `generate _protein()` function that returns amino acid sequences of a user requested length?


Install `bio3d` package before running this. 

```{r}
aa <- bio3d::aa.table$aa1[1:20]
```


```{r}
generate_protein <- function(length = 5) {
  aa <- bio3d::aa.table$aa1[1:20]
  s <- sample(aa, size = length, replace = TRUE)
  paste(s, collapse = "")
}

```

```{r}
generate_protein()
```

I want my output of this function not to be a vector with one amino acid per element but rather a one element single string. 


```{r}
bases <- c("A", "G", "C", "T")

paste(bases, collapse = "")
```

> Q. Generate protein sequences from length 6 to 12?

```{r}
generate_protein(length=6)
generate_protein(length=7)
generate_protein(length=8)
```

We can use the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12.

```{r}
ans <- sapply(6:12, generate_protein)
ans
```

```{r}
cat(paste(">ID", 6:12, sep="", "\n", ans, "\n"))
```

> Q. Are any of these sequences unique in nature - i.e. never found in nature. We can search "refseq-protein" and look for 100% Ide and 100% coverage matches with BLASTp. 

Yes, ID6 and ID8 had 100% Ide and 100% coverage matches. 

ID7, ID9, ID10, ID11, ID12 did not have a 100% Ide and 100% coverage match.

Randomized shorter sequences has higher changes to have matches while longer sequences will be less likely to have matches. 
