---
title: "Analyzing Sequencing Data in the Cloud"
author: "Amanda Wilpitz | A17463962"
format: pdf
---

## Downstream Analysis

First, install an R function called `tximport()` which enables straightforward import of Kallisto results using

```{r}
#BiocManager::install("tximport")
```

```{r}
library(tximport)

# setup the folder and filenames to read
folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

Then I will view the counts of txi.kallisto using `head()`

```{r}
head(txi.kallisto$counts)
```
Then, to see how many transcripts we have per sample, I'll use `colSums`

```{r}
colSums(txi.kallisto$counts)
```

To see how many transcripts are detected in at least one sample:

```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

We want to filter out annotated transcripts without any reads:

```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]
```

And then, to filter out annotated transcripts with no change over the samples:

```{r}
keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```

## Princiapl Component Analysis

Next, I'll perform a PCA of the transcriptomic profiles of these samples, computing the principal components and centering/scaling each transcript's measured levels so that each feature contributes equally to the PCA:

```{r}
pca <- prcomp(t(x), scale=TRUE)

summary(pca)
```

Next, I'll plot the first two principal components to visualze the summarized transcriptomic profiles of each sample.

```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)
```

> Q. Use ggplot to make a similar figure of PC1 vs PC2 and a seperate figure PC1 vs PC3 and PC2 vs PC3.

```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC2, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```


## Differential-Expression Analysis

```{r}
library(DESeq2)
```
```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```

```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```


